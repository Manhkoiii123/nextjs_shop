import { useTheme } from '@mui/material'
import { Checkbox, Typography } from '@mui/material'
import { GridColDef, GridRenderCellParams } from '@mui/x-data-grid'
import { Dispatch, SetStateAction, useState } from 'react'
import { useTranslation } from 'react-i18next'
import CustomDataGrid from 'src/components/custom-data-grid'
import { LIST_DATA_PERMISSIONS, PERMISSIONS } from 'src/configs/permissions'
import { getAllValueObject } from 'src/utils'

interface TTablePermission {
  setPermissionSelected: Dispatch<SetStateAction<string[]>>
  permissionSelected: string[]
  disabled: boolean
}
const TablePermission = (props: TTablePermission) => {
  const { permissionSelected, setPermissionSelected, disabled } = props

  const theme = useTheme()
  const { t } = useTranslation()

  const handleGetValuePermission = (value: string, mode: string, parentValue?: string) => {
    try {
      //case 2 l√† s·ª≠ l√≠ tr∆∞·ªùng h·ª£p dashboard n√≥ ko ƒë√∫ng ƒë·ªãnh d·∫°ng
      return parentValue ? PERMISSIONS[parentValue][value][mode] : PERMISSIONS[value] //t∆∞∆°ng t·ª± P·∫∫.pare.value.mode (mode l√† c√°i create edit view....)
    } catch (error) {
      return ''
    }
  }

  // h√†m ƒë·ªÉ check xem ƒë√£ check all ch∆∞a
  const handleIsCheck = (value: string, parentValue?: string) => {
    const allValue = parentValue
      ? getAllValueObject(PERMISSIONS[parentValue][value])
      : getAllValueObject(PERMISSIONS[value])

    //khi v√†o truowgf h·ª£p c√°i dash th√¨ c√°i permiss[value ]= dash m√† n√≥ ko l√† obj

    // v√≠ d·ª• c√°i cha l√† settig c√≥ 2 con l√† a v√† b (m·ªói c√°i c√≥ crud)
    // khi check all c√°i a th√¨ ch·∫°y c√°i handlecheckAllCheckBoxChildren => set ƒë∆∞·ª£c c√°i perSel
    // khi check all c√°i b th√¨ utowng t·ª±
    // => khi ƒë√≥ c√°i ischeck ch·∫°y l·∫°i => c√°i isCheckAll c·ªßa Setting c≈©ng l√† true
    // khi ƒë√≥ c√°i check all c·ªßa setting c≈©ng ƒë∆∞·ª£c check
    const isCheckAll = allValue.every(item => permissionSelected.includes(item))

    return { isCheckAll, allValue }
  }
  //case x·ª≠ l√≠ check all c·ªßa c√°i con
  // c√°i parentValue l√† ?: l√† v√¨ c√≥ case DASHBOARD n·ªØa
  const handlecheckAllCheckBoxChildren = (value: string, parentValue?: string) => {
    const ans = handleIsCheck(value, parentValue)
    const { isCheckAll, allValue } = ans
    if (isCheckAll) {
      // n·∫øu ƒë√£ c√≥ check r·ªìi => b·ªè n√≥ ƒëi
      const filtered = permissionSelected.filter(item => !allValue.includes(item))
      setPermissionSelected(filtered)
    } else {
      //ch∆∞a check
      setPermissionSelected([...new Set([...permissionSelected, ...allValue])])
    }
  }

  //check all c√°i setting ch·ª©a c√°i a v√† b
  const handleCheckAllGroup = (value: string) => {
    const ans = handleIsCheck(value)
    const { isCheckAll, allValue } = ans
    if (isCheckAll) {
      // n·∫øu ƒë√£ c√≥ check r·ªìi => b·ªè n√≥ ƒëi
      const filtered = permissionSelected.filter(item => !allValue.includes(item))
      setPermissionSelected(filtered)
    } else {
      //ch∆∞a check
      setPermissionSelected([...new Set([...permissionSelected, ...allValue])])
    }
  }
  const handleOnChangeCheckBox = (value: string) => {
    const isChecked = permissionSelected.find(item => item === value)
    if (isChecked) {
      const filtered = permissionSelected.filter(item => item !== value)
      setPermissionSelected(filtered)
    } else {
      setPermissionSelected([...permissionSelected, value])
    }
  }
  const columns: GridColDef[] = [
    {
      field: 'all',
      headerName: '',
      minWidth: 80,
      maxWidth: 80,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => {
        const { row } = params

        //case ·∫•n check h·∫øt c√°c √¥ trong con th√¨ c√°i √¥ all c·ªßa c√°i ƒë√≥ s·∫Ω ƒë∆∞·ª£c check
        const ans = handleIsCheck(row.value, row.parentValue)
        const { isCheckAll } = ans

        return (
          <>
            {' '}
            <Checkbox
              disabled={disabled}
              checked={isCheckAll}
              value={row?.value}
              onChange={e => {
                if (row.isParent) {
                  handleCheckAllGroup(e.target.value)
                } else {
                  handlecheckAllCheckBoxChildren(e.target.value, row.parentValue)
                }
              }}
            />
          </>
        )
      }
    },
    {
      field: 'name',
      headerName: t('name'),
      flex: 1,
      minWidth: 200,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => {
        const { row } = params
        //parent th√¨ d·ª±a v√†o c√°i isPa = true
        // n·∫øu m√† l√† parent th√¨ ph·∫£i l·∫•y ƒë∆∞·ª£c h·∫øt c√°c c√°i crud c·ªßa c√°c c√°i con c·ªßa n√≥ ƒë·ªÉ khi m√† check all ·ªü c√°i parent th√¨ check all c√°c c√°i con c·ªßa n√≥ => ok
        //khi ƒë√≥ b√™n c√°i LIST_DATA_PERMISSIONS c√°c c√°i cha s·∫Ω c√≥ th√™m c√°i value n·ªØa ƒë·ªÉ xem ·∫•n v√†o c√°i n√†o

        return (
          <Typography
            sx={{
              color: row?.isParent ? theme.palette.primary.main : `rgba${theme.palette.customColors.main},0.78`,
              paddingLeft: row?.isParent ? '0' : '40px',
              textTransform: row?.isParent ? 'uppercase' : ''
            }}
          >
            {t(row?.name)}
          </Typography>
        )
      }
    },

    {
      field: 'view',
      headerName: t('view'),
      minWidth: 100,
      maxWidth: 100,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => {
        // console.log('üöÄ ~ TablePermission ~ params:', params) => ra laf thayas
        const { row } = params
        const value = handleGetValuePermission(row.value, 'VIEW', row.parentValue)
        // console.log('üöÄ ~ TablePermission ~ row:', {
        //   row,
        //   PERMISSIONS,
        //   value: PERMISSIONS[row.parentValue]?.[row.value] l·∫•y ƒë∆∞·ª£c c√°i create edit delete view c√°i n√†o ko c√≥ th√¨ l√† undefind
        // })

        //cl ra th√¨ c√°i row ch√≠nh l√† c√°c c√°i item b√™n per ƒë·ªãnh nghƒ©a kia
        // th·∫•y c√°i n√†o ko c√≥ c√°i isHideView m·ªõi hi·ªán c√°i ƒë·∫•y l√™n ƒë·ªÉ ƒë∆∞·ª£c ch·ªânh s·ª≠a quy·ªÅn xem hay ko

        return (
          <>
            {!row?.isHideView && !row?.isParent && (
              <Checkbox
                disabled={disabled}
                value={value}
                checked={permissionSelected.includes(value)}
                onChange={e => handleOnChangeCheckBox(e.target.value)}
              />
            )}
          </>
        )
      }
    },
    {
      field: 'create',
      headerName: t('create'),
      minWidth: 100,
      maxWidth: 100,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => {
        const { row } = params
        const value = handleGetValuePermission(row.value, 'CREATE', row.parentValue)

        return (
          <>
            {!row?.isHideCreate && !row?.isParent && (
              <Checkbox
                disabled={disabled}
                value={value}
                onChange={e => handleOnChangeCheckBox(e.target.value)}
                checked={permissionSelected.includes(value)}
              />
            )}
          </>
        )
      }
    },
    {
      field: 'delete',
      headerName: t('delete'),
      minWidth: 100,
      maxWidth: 100,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => {
        const { row } = params
        const value = handleGetValuePermission(row.value, 'DELETE', row.parentValue)

        return (
          <>
            {!row?.isHideDelete && !row?.isParent && (
              <Checkbox
                disabled={disabled}
                value={value}
                onChange={e => handleOnChangeCheckBox(e.target.value)}
                checked={permissionSelected.includes(value)}
              />
            )}
          </>
        )
      }
    },
    {
      field: 'update',
      headerName: t('edit'),
      minWidth: 120,
      maxWidth: 120,
      sortable: false,
      renderCell: (params: GridRenderCellParams) => {
        const { row } = params
        const value = handleGetValuePermission(row.value, 'UPDATE', row.parentValue)

        return (
          <>
            {!row?.isHideUpdate && !row?.isParent && (
              <Checkbox
                disabled={disabled}
                value={value}
                onChange={e => handleOnChangeCheckBox(e.target.value)}
                checked={permissionSelected.includes(value)}
              />
            )}
          </>
        )
      }
    }
  ]

  return (
    <>
      <CustomDataGrid
        rows={LIST_DATA_PERMISSIONS}
        columns={columns}
        pageSizeOptions={[5]}
        autoHeight
        disableRowSelectionOnClick
        hideFooter
        disableColumnFilter
        disableColumnMenu
      />
    </>
  )
}
export default TablePermission

// x·ª≠ l√≠ c√°i check all c·ªßa t·ª´ng h√†ng 1
// v√≠ d·ª• n·∫øu ·∫•n v√†o c√°i check all c·ªßa parent(v√≠ d·ª• settting) th√¨ s·∫Ω check all c√°c c√°i children c·∫£ create edit... c·ªßa n√≥
// => case n√†y th√¨ d·ª±a v√†o c√°i isP =true
// n·∫øu ·∫•n c√°i check all c·ªßa c√°i conn (con c·ªßa setting l√† c√°i City )=> th√¨ s·∫Ω check all c√°i crud c·ªßa city => handlecheckAllCheckBoxChildren()
